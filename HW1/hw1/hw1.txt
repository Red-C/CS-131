
	The program will input a list of grammar rules, and output a list of rules
without blind-alley rules. The program passed all the test case. The code 
starts with function filter_blind_alleys. First, function will first generate 
a list of good rulesn; second, remove all the unused rules; last, rearrange the
rules.

	filter_rules will generate the goodRules. it will recursively update 
terminal rules. For each time it calls itself, it will add the rules which 
their right hand side contains only terminal symbols into terminalList or the
rules which their right hand side contains terminal symbols and the rules that 
already in terminalList. the recursive function will stop when the size of
terminalList doesn't change after updated, which means there are no more "good
rules", and it will return the list after that.

	removeUnusedRules will remove the rules that will never be called. Before 
removeUnusedRules, unionRHS will group all the symbol that will be called by
grouping rhs of good symbols. removeUnusedRules will compare every lhs in 
goodRules with goodSymbols list(generated by unionRHS). if a lhs of a rule 
is not exist in goodSymbols list, it means the rule will never be called in 
any pattern of sentence, then the function removes it.

	reorderRules will rearrange the result in same order as the input. It just 
simply call set_union function.
